#!/usr/bin/env python3
import math
import pprint
from typing import Tuple, Dict, Any, Optional
from functools import wraps

from loguru import logger
from beartype import beartype

import sympy
from sympy import simplify, init_printing, abc, symbols, shape, eye, pi, I, Expr, Integer, Number, FiniteSet
from sympy.matrices import Matrix, ImmutableMatrix, BlockMatrix, ZeroMatrix, Identity
from sympy.functions import exp
from sympy.physics.quantum.dagger import Dagger
from sympy.printing.pretty.pretty import pprint as spprint


@beartype
def get_omega(p: int) -> Expr:
    return exp((2 * pi * I) / p)


@beartype
def get_primitive_pth_roots_of_unity(p: int) -> list[Expr]:
    omegas: List[Expr] = []
    for k in get_coprime_set(p):
        omegas.append(exp((2 * k * pi * I) / p))
    return omegas



# Stolen from: https://stackoverflow.com/a/40190938
def get_coprime_set(modulo: int) -> list[int]:
    return {num for num in range(1, modulo) if math.gcd(num, modulo) == 1}


@beartype
def get_type_iii_gamma(a: int, b: int, p: int, q: list[int], omega: Expr) -> list[ImmutableMatrix]:
    """
    Compute the elements of gamma, the matrix subgroup of U(a, b) generated by
    (p, q). See p. 395 in ``Spherical space forms, CR mappings, and proper maps
    between balls`` by D'Angelo and Lichtblau.
    """
    assert a + b == len(q)
    n = a + b

    # Generate rows.
    rows: list[list[int]] = []
    for j in range(n):
        row = [0 for _ in range(n)]
        row[j] = omega ** q[j]
        rows.append(row)

    s = ImmutableMatrix(Matrix(rows))
    assert s.is_square

    elements: list[Matrix] = []
    for j in range(p):
        gamma = s ** j
        elements.append(gamma)
    return elements


@beartype
def is_in_SU_AB(matrix: ImmutableMatrix, a: int, b: int) -> bool:
    assert matrix.is_square

    n = shape(matrix)[0]
    assert n == a + b

    I_ab = get_I_ab(a, b)
    spprint(I_ab)
    A_I_ab_A_dagger = matrix * I_ab * Dagger(matrix)
    return A_I_ab_A_dagger == I_ab



@beartype
def get_I_ab(a: int, b: int) -> ImmutableMatrix:
    assert a > 0 and b > 0
    n = a + b
    I_ab = BlockMatrix([[Identity(a), ZeroMatrix(a, b)], [ZeroMatrix(b, a), -Identity(b)]])
    return I_ab.as_explicit()


def main() -> None:

    # DEBUG
    p = 6
    a = 1
    b = 2
    q_1 = 2
    q_2 = 3
    q_3 = 5
    q = [q_1, q_2, q_3]

    primitive_roots = get_primitive_pth_roots_of_unity(p)
    for omega in primitive_roots:
        group = get_type_iii_gamma(a, b, p, q, omega)
        for m in group:
            assert is_in_SU_AB(m, a, b)
        spprint(FiniteSet(*group))


if __name__ == "__main__":
    main()
